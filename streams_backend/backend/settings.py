"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import json
import os
import sys
from pathlib import Path

import dj_database_url
import sentry_sdk
from corsheaders.defaults import default_headers
from dotenv import load_dotenv
from sentry_sdk.integrations.django import DjangoIntegration

load_dotenv()


def parse_settings_boolean(var_name: str) -> bool:
    return bool(int(str(os.getenv(var_name, 0))))


SECRET_KEY = os.getenv("SECRET_KEY")
DEBUG = parse_settings_boolean("DEBUG")
PUBLISHER = parse_settings_boolean("PUBLISHER")
PG_BONCER_HOST = os.getenv("PG_BONCER_HOST")
CHUNKS_CHANNEL = os.getenv("CHUNKS_CHANNEL")

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

sentry_sdk.init(
    dsn=os.getenv("SENTRY_DSN"),
    integrations=[DjangoIntegration()],
    send_default_pii=True
)

ALLOWED_HOSTS = ['*', ]

MIDDLEWARE = [
    *(['debug_toolbar.middleware.DebugToolbarMiddleware', ] if DEBUG else []),
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

APPLICATIONS = [
    "common",
    "users",
    "streams",
]

INSTALLED_APPS = [
    'django.contrib.sites',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'knox',
    'djoser',
    'rest_auth',
    'anymail',
    'corsheaders',
    'django_celery_beat',
    'constance',
]

if DEBUG:
    def show_toolbar(*args, **kwargs):
        return True


    INSTALLED_APPS.append("debug_toolbar")
    DEBUG_TOOLBAR_CONFIG = {
        'SHOW_TOOLBAR_CALLBACK': 'backend.settings.show_toolbar',
    }

INSTALLED_APPS += APPLICATIONS

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

DATABASE = dj_database_url.config(default=os.getenv('DATABASE_URL'))

if PG_BONCER_HOST:
    DATABASE['HOST'] = PG_BONCER_HOST
    DATABASE['PORT'] = os.getenv("PG_BONCER_PORT", 5432)

DATABASES = {
    'default': DATABASE
}

REDIS_URL = os.environ['REDIS_URL']

AUTH_USER_MODEL = 'users.User'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.AllowAllUsersModelBackend',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'common.views.auth.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        *(['rest_framework.renderers.BrowsableAPIRenderer', ] if DEBUG else []),
    ],
}

DJOSER = {
    'TOKEN_MODEL': 'knox.models.AuthToken',
    'SET_PASSWORD_RETYPE': True,
    'LOGOUT_ON_PASSWORD_CHANGE': True,
    'PASSWORD_RESET_CONFIRM_URL': 'account/password/reset/{uid}/{token}',  # url of frontend
    'PASSWORD_RESET_CONFIRM_RETYPE': False,
    'ACTIVATION_URL': 'account/activate/{uid}/{token}',  # url of frontend
    'SEND_ACTIVATION_EMAIL': True,
    'SERIALIZERS': {
        'user_create': 'users.serializers.CreateUserSerializer',
        'current_user': 'users.serializers.UserSerializer',
    },
    # POST api/auth/users/activation/
}

REST_KNOX = {
    'TOKEN_TTL': None,
    'USER_SERIALIZER': 'users.serializers.UserSerializer',
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
]

LOCALE_PATHS = [os.path.abspath(os.path.join(BASE_DIR, 'locale'))]
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = False
USE_L10N = False
USE_TZ = True

STATIC_URL = '/static/'

EMAIL_BACKEND = "anymail.backends.sendgrid.EmailBackend"
DEFAULT_FROM_EMAIL = "mail@test.tv"
ANYMAIL = {
    "SENDGRID_API_KEY": os.environ["SENDGRID_API_KEY"],
}

SITE_ID = os.getenv("SITE_ID", 1)

CENTRIFUGO = {
    "host": os.environ["CENTRIFUGO_HOST"],
    "api_key": os.environ["CENTRIFUGO_API_KEY"],
    "secret": os.environ["CENTRIFUGO_SECRET"],
}

CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = [
    "http://localhost:5000",
    *json.loads(os.getenv("CORS_ORIGINS", "[]"))
]

CORS_ALLOW_HEADERS = list(default_headers) + [
    "Content-Disposition",
]

RECAPTCHA_ENDPOINT = "https://www.google.com/recaptcha/api/siteverify"
RECAPTCHA_PRIVATE_KEY = "6LdhmLwUAAAAABB70n7B03PVakxEsGotFIQVzJVW"
RECAPTCHA_REQUIRED_SCORES = {
    "login": 0.7,
    "signup": 0.85
}

CONSTANCE_REDIS_CONNECTION = REDIS_URL
CONSTANCE_CONFIG = {
    "USE_CLOUD_PROB": (0, "Probability of using cloud (0-100)", int),
    "TARGET_SEED_USERS": (0, "Target amount of users downloading stream from cloud", int),
    "DELETE_OLD_USERS_CHUNKS": (True, "Delete old user chunks in clear_old_chunks task", bool),
    "END_STREAM_AFTER": (60, "Time from last chunk creation in seconds", int),
    "OLD_CHUNK_THRESHOLD": (120, "Time to delete chunk after in seconds", int),
}
